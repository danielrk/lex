		   R E V I S E D   S P E C I F I C A T I O N

					Due 2:00 AM, Wednesday, 08 October 2014


CPSC 323   Homework #4    Merrily We Lex Along, ...

REMINDERS:  Do not under any circumstances copy another student's code or give
a copy of your code to another student.  After discussing the assignment with
another student, do not take any written or electronic record away and engage
in a full hour of mind-numbing activity before you work on it again.

Since code reuse is an important part of programming, you may incorporate
published code (e.g., from textbooks or the Net) in your programs, provided
you give proper attribution in your source and in your log file AND THE BULK OF
THE CODE SUBMITTED IS YOUR OWN.


(60 points) Write a command line lexer "Lex" that prompts for and reads
bash-like commands from the standard input, breaks them into tokens, and
writes the tokens to the standard output, identified by token type and
separated by blanks.  Here a token is one of:

(1) a maximal contiguous sequence of nonblank printing characters (see
    isgraph()) other than the metacharacters <, >, ;, &, |, (, and );

(2) a redirection symbol (<, <<, >, >>, or |);

(3) a command separator (;, &, &&, or ||).

(4) a left or right parenthesis (used to group commands);

Whitespace can be used to separate tokens from one another and is otherwise
ignored.  Nonprinting characters are treated as blanks.

Lex should also include a history mechanism.  The most recent 323 (*) commands
are stored in a history list; and certain substrings of the current command are
replaced by "words" (= nonempty maximal sequences of non-space characters) from
commands in the list before lexing begins.  This makes it easy to repeat
commands, to insert the arguments to a previous command into the current input
line, or to fix errors in previous commands quickly.

(*) If the environment variable HISTSIZE exists and the value of $HISTSIZE is a
    positive integer, then that many commands are remembered.

History expansions are introduced by the appearance of the history expansion
character ! and come in two parts.  The first (the "event") specifies which
command from the history list to use during substitution.  The second selects
portions of that command for inclusion into the current one.

The event designators specify the command in the history list:

  !N         Refer to command line N, where N is a sequence of decimal digits.
  !-N        Refer to the current command line minus N, where N is a sequence
	      of decimal digits.
  !!         Refer to the previous command.  This is a synonym for `!-1'.
  !?STRING?  Refer to the most recent command containing STRING, which is
	      nonempty and does not contain whitespace or ?.  The trailing     |
	      ? may be omitted if STRING is followed immediately by newline.   |

The word designators select words from the event (words are numbered from the
beginning of the line, starting with 0):

  ^   The first word; i.e., word 1.
  :M  The Mth word, where M is a sequence of decimal digits.
  $   The last word.
  *   All words but the 0th.  It is not an error to use * if there is just
       one word in the event; the empty string is returned in that case.

The search for substrings (i.e., event [+ word] designators) to expand proceeds
from left to right.  When a match is found, the substring is replaced by the
word(s) that it specifies, with multiple words separated by single spaces.
The search for other expansions resumes AFTER the replacement string.

If there are substitutions and all succeed, the expanded line is written to
stdout before being lexed.  If any substitution is impossible, then the
replacement process ends, a one-line error message is written to stderr, and
lexing is skipped.

The history mechanism remembers a command line as it appears after expansion
has taken place (but only if it contains at least one token).

For example:
 
  (1)$ a b c d e
  a:10 b:10 c:10 d:10 e:10
  (2)$ b c d e f
  b:10 c:10 d:10 e:10 f:10
  (3)$ !1
  a b c d e
  a:10 b:10 c:10 d:10 e:10
  (4)$ !-2
  b c d e f
  b:10 c:10 d:10 e:10 f:10
  (5)$ !?a? !?a?
  a b c d e a b c d e
  a:10 b:10 c:10 d:10 e:10 a:10 b:10 c:10 d:10 e:10
  (6)$ !?f?*
  c d e f
  c:10 d:10 e:10 f:10
  (7)$ !2$
  f
  f:10
 
In addition to writing the tokens to the standard output, Lex processes the
following commands:

  history: Print the most recent 9 remembered commands by increasing number.

  hclear:  Forget all remembered commands.

The file Hwk4/mainLex.c contains the main program for Lex; all you have to
write are the functions lex(), hExpand(), hRemember(), hClear(), and hDump(),
whose interfaces are specified in Hwk4/lex.h and Hwk4/history.h.
 
Use the submit command to turn in your source and log files for Lex (including
a Makefile, but not mainLex.*, getLine.*, lex.h, or history.h) as assignment 4.

YOU MUST SUBMIT YOUR FILES (INCLUDING THE LOG FILE) AT THE END OF ANY SESSION
WHERE YOU HAVE SPENT AT LEAST ONE HOUR WRITING OR DEBUGGING CODE, AND AT LEAST
ONCE EVERY HOUR DURING LONGER SESSIONS.  (All submissions are retained.)


Notes:
 
1. [Matthew & Stones, Chapter 2] contains a more complete description of bash,
   including the history mechanism, the various I/O redirection operators,
   command separators, and the use of parentheses.  Unlike bash, Lex does NOT
   handle filename substitution (*, ?, and [..]); command substitution
   (`command`); shell variables (name=variable); or macro expansion ($...).
   Moreover, the behavior of Lex may not match bash in other particulars,
   including:
     a. Treatment of escape characters
     b. Treatment of strings
     c. History commands other than those described above
     d. STRING may not contain whitespace                                      |
     e. Commands may not contain backslashes                                   |
     ...
   Note:  This list will expand as I learn of discrepancies.

2. DO NOT MODIFY Hwk4/getLine.h, Hwk4/getLine.c, Hwk4/lex.h, Hwk4/history.h, or
   Hwk4/mainLex.c, and use Hwk4/getLine.o and Hwk4/mainLex.o rather than local
   copies.  The source code for lex(), hExpand(), hRemember(), hClear(), and
   hDump(), should be in a different file (or even better, two files, one for
   lex(), one for hExpand() et al.).

3. For simplicity, you may ignore the possibility of error returns from
   malloc()/realloc().  However, you should free() all such storage when it is
   no longer needed so that all storage is freed before Lex exits.  (Note that
   main() calls hClear() before it exits.)

4. You may assume that strings passed to hExpand() contain only nonblank
   printing characters (see isgraph()) and whitespace (see isspace()).

5. Lex may use a fixed-length array or a linked list to implement the history
   mechanism.

6. To avoid a limit on the size of a line, Lex uses the function

	char *getLine(FILE *fp)

   in the file /c/cs323/Hwk4/getLine.o (see also /c/cs323/Hwk4/getLine.h).

7. You may find the functions strtol(), strspn(), and strcspn() useful.

8. The input used by the test scripts need not be valid bash commands.

9. Assume that N and M can be represented in an int variable.                  |

A. The function getenv() retrieves the value of an environmental variable.     |
   Either atoi() or strtol() may be used to convert $HISTSIZE to an integer;   |
   no error checking is required (e.g., "323abc" is a valid value).            |

								CS-323-09/24/14
